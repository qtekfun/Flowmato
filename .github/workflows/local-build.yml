name: Local Android Debug Build

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  # Pre-build checks
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🧹 Lint
        run: npm run lint

      - name: 🧪 Test
        run: npm test

  # Build Android Debug APK
  build-android-debug:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 📦 Install dependencies
        run: npm install

      - name: 🏗 Setup Expo
        run: |
          npm install -g @expo/cli@latest
          npx expo install --fix

      - name: 🔧 Prebuild Android project
        run: |
          npx expo prebuild --platform android --clear

      - name: 🔧 Configure Gradle wrapper
        working-directory: android
        run: |
          chmod +x gradlew
          ./gradlew --version

      - name: 🏗 Build Debug APK
        working-directory: android
        run: |
          ./gradlew assembleDebug --no-daemon --stacktrace

      - name: 📱 Locate Debug APK
        id: locate_apk
        run: |
          # Find debug APK file
          DEBUG_APK=$(find android/app/build/outputs/apk -name "*debug*.apk" | head -1)

          if [ -n "$DEBUG_APK" ]; then
            echo "debug_apk=$DEBUG_APK" >> $GITHUB_OUTPUT
            echo "Found debug APK: $DEBUG_APK"
            ls -la "$DEBUG_APK"
          else
            echo "No debug APK found"
            exit 1
          fi

      - name: 📝 APK Info
        run: |
          echo "### 📱 Debug APK Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          APK_SIZE=$(du -h "${{ steps.locate_apk.outputs.debug_apk }}" | cut -f1)
          echo "- **Debug APK Size**: $APK_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ready for**: Testing and development" >> $GITHUB_STEP_SUMMARY

      - name: 📎 Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: flowmato-debug-${{ github.sha }}
          path: ${{ steps.locate_apk.outputs.debug_apk }}
          retention-days: 30

  # Create release if this is a tag
  create-release:
    needs: build-android-debug
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: flowmato-debug-${{ github.sha }}
          path: ./artifacts

      - name: 📝 Prepare release assets
        id: prepare_assets
        run: |
          # Find downloaded APK file
          find ./artifacts -name "*.apk" -type f

          # Rename APK for release
          cp ./artifacts/*.apk ./flowmato-debug.apk
          echo "debug_apk=./flowmato-debug.apk" >> $GITHUB_OUTPUT

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          APK_SIZE=$(du -h ./flowmato-debug.apk | cut -f1)

          cat > release_notes.md << EOF
          # Flowmato $VERSION

          ## 📱 Android Debug APK

          This release includes a debug build for testing and development:

          ### Download
          - **Debug APK**: ${APK_SIZE} - Ready for testing and sideloading

          ## 🚀 Installation Instructions

          ### Android
          1. Download the Debug APK
          2. Enable "Install from unknown sources" in your Android device settings
          3. Install the APK file

          ## 📋 Requirements
          - **Android**: Android 6.0+ (API level 23)

          ## ⚠️ Debug Build Notice
          This is a debug build intended for:
          - Testing and development
          - Internal distribution
          - Debugging purposes

          For production use, consider building a release APK with proper signing.

          ## 🔧 Build Information
          - **Built with**: Local GitHub Actions (EAS-free)
          - **Build Date**: $(date)
          - **Commit**: ${{ github.sha }}
          - **Node.js**: ${{ env.NODE_VERSION }}
          - **Java**: ${{ env.JAVA_VERSION }}
          - **Build Type**: Debug

          ---

          Built with ❤️ using Expo and React Native
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Flowmato ${{ steps.release_notes.outputs.VERSION }} (Debug)
          body_path: release_notes.md
          files: |
            ./flowmato-debug.apk
          draft: false
          prerelease: true
